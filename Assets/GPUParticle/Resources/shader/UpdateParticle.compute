// Each #kernel tells which function to compile; you can have many kernels
#include "particle.cginc"
#include "mathLib.cginc"


#pragma kernel UpdateParticle



RWStructuredBuffer<EmitParticleInfo> emitParticleInfo;

RWStructuredBuffer<uint> alivelist;
AppendStructuredBuffer<uint> deadlist;
AppendStructuredBuffer<uint> alivelistSec;

RWStructuredBuffer<ParticleCounter> particleCounter;
RWStructuredBuffer<Particle> particlePool;
RWStructuredBuffer<uint> instancingArg;

float time;

float rand(float2 co, float offset) {
	co += float2(offset, offset);

	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

float randNP1(float2 co, float offset) {
	return rand(co, offset) * 2.0 - 1.0;
}

[numthreads(1024,1,1)]
void UpdateParticle (uint3 id : SV_DispatchThreadID)
{
  uint alivelistCount = particleCounter[0].updateParticleCount;
  if (id.x < alivelistCount){
	uint particleId = alivelist[id.x];
	Particle particle = particlePool[particleId];
	particle.velocity += emitParticleInfo[0].acceleration * emitParticleInfo[0]._dt;
	particle.lifespan += emitParticleInfo[0]._dt;
	particle.position += particle.velocity * emitParticleInfo[0]._dt;

	if ( particle.lifespan  > emitParticleInfo[0].lifespan ){
	  deadlist.Append(particleId);

	  InterlockedAdd(particleCounter[0].deadlistCount, 1);
	  InterlockedAdd(particleCounter[0].alivelistCount, -1);
	}else{
	  alivelistSec.Append(particleId);

	}

	float4 deltaRot = qmul(float4(0.5 * emitParticleInfo[0].angularSpeed, 0.0), particle.quaternion);
	float4 newRot = normalize(particle.quaternion + deltaRot * emitParticleInfo[0]._dt);
	particle.quaternion = newRot;
	float4 q = particle.quaternion;
	
	float4x4 rotMat = float4x4(
		1 - 2 *q.y * q.y - 2 * q.z * q.z,   2 * q.x* q.y + 2 * q.w * q.z,   2 * q.x * q.z - 2 * q.w * q.y, 0.0,
		2 * q.x * q.y - 2 * q.w * q.z, 1 - 2 * q.x * q.x - 2 * q.z * q.z, 2 * q.y * q.z + 2 * q.w * q.x, 0.0,
		2 * q.x * q.z + 2 * q.w * q.y, 2 * q.y * q.z - 2 * q.w* q.x, 1 - 2 * q.x * q.x - 2 * q.y * q.y, 0.0,
		0.0, 0.0, 0.0, 1.0
	);

	float4x4 scale = float4x4(
		particle.scale.x, 0.0, 0.0, 0.0,
		0.0, particle.scale.y, 0.0, 0.0,
		0.0, 0.0, particle.scale.z, 0.0,
		0.0, 0.0, 0.0, 1.0
		);

	float4x4 trans = float4x4(
		1.0, 0.0, 0.0, particle.position.x,
		0.0, 1.0, 0.0, particle.position.y,
		0.0, 0.0, 1.0, particle.position.z,
		0.0, 0.0, 0.0, 1.0
		);



	particle.model = mul(trans,mul(rotMat, scale));
	particlePool[particleId] = particle;
  }

}
