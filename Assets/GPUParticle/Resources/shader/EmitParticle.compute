// Each #kernel tells which function to compile; you can have many kernels
#include "particle.cginc"
#include "mathLib.cginc"


#pragma kernel EmitParticle


RWStructuredBuffer<EmitParticleInfo> emitParticleInfo;
RWStructuredBuffer<Particle> particlePool;
RWStructuredBuffer<ParticleCounter> particleCounter;

AppendStructuredBuffer<uint> alivelist;
ConsumeStructuredBuffer<uint> deadlist;

float time;

// between -1 ~ 1
float randNP1(float2 co) {
	return rand(co) * 2.0 - 1.0;
}

void SetSubframe(uint index, uint3 id) {
	float t = id.x / float(emitParticleInfo[0].realEmitCount);
	particlePool[index].lifespan = t * emitParticleInfo[0]._dt;
	particlePool[index].position -= t * (emitParticleInfo[0].originPos - emitParticleInfo[0].prevPosition);
}

void SetDefaultScale(uint index, float2 randKey) {
	particlePool[index].scale = (randNP1(randKey + 4.0) * emitParticleInfo[0].scaleRandom + 1.0)  * emitParticleInfo[0].scale;
}

float RandStartVelocity(float2 randKey, float offset) {
	return emitParticleInfo[0].startVelocity * (1 - emitParticleInfo[0].startVelocityRandomness * rand(randKey + offset));
}

void boxEmit(uint index, uint3 id) {
	float2 randKey = float2(index, time);
	float3 right = AxisRotateByQuaternion(float3(1.0, 0.0, 0.0), emitParticleInfo[0].emitterRot);
	float3 up = AxisRotateByQuaternion(float3(0.0, 1.0, 0.0), emitParticleInfo[0].emitterRot);
	float3 forward = AxisRotateByQuaternion(float3(0.0, 0.0, 1.0), emitParticleInfo[0].emitterRot);

	float3 size = emitParticleInfo[0].boxEmitSize;
	float3 posOffset = (right * randNP1(randKey) * size.x + up * randNP1(randKey + 1.0) * size.y + forward * randNP1(randKey + 2.0) * size.z);

	particlePool[index].velocity = RandStartVelocity(randKey, 0.4) * AxisRotateByQuaternion(float3(0.0, 0.0, 1.0), emitParticleInfo[0].emitterRot);
	particlePool[index].quaternion = Quaternion();
	particlePool[index].position = emitParticleInfo[0].originPos + posOffset;
	SetDefaultScale(index, randKey);
	SetSubframe(index, id);		
}

void coneEmit(uint index, uint3 id) {
	float2 randKey = float2( index, time);
	float randAngle = (randNP1(randKey) * (emitParticleInfo[0].coneEmitAngle)) * 0.5;
	float3 right = AxisRotateByQuaternion(float3(1.0, 0.0, 0.0), emitParticleInfo[0].emitterRot);
	float3 up = AxisRotateByQuaternion(float3(0.0, 1.0, 0.0), emitParticleInfo[0].emitterRot);
	float3 forward = AxisRotateByQuaternion(float3(0.0, 0.0, 1.0), emitParticleInfo[0].emitterRot);
	float2 randKeyRev = float2(randKey.y, randKey.x);
	float randRight = (randNP1(randKeyRev + time + 1.2) + 0.2);
	float randUp = (randNP1(randKeyRev + time + 0.4) + 0.2);
	float2 randRightUp = randRight == 0.0 && randUp == 0.0 ? float2(1.0, 1.0) : float2(randRight, randUp);
	randRightUp = normalize(randRightUp);
	float3 axis = AxisRotateByQuaternion(float3(randRightUp.x, randRightUp.y, 0.0), emitParticleInfo[0].emitterRot);
	float4 rot = NormalizeQuaternion(Quaternion(axis, randAngle));
	float3 dir = normalize(AxisRotateByQuaternion(forward, rot));

	particlePool[index].velocity = RandStartVelocity(randKey, 0.4) * dir;
	particlePool[index].quaternion = Quaternion();
	particlePool[index].position = emitParticleInfo[0].originPos;
	SetDefaultScale(index, randKey);
	SetSubframe(index, id);

}

void sphereEmit(uint index, uint3 id) {
	float2 randKey = float2(index, time);
	float3 dir = normalize(float3(randNP1(randKey + 0.0), randNP1(randKey + 1.0), randNP1(randKey + 2.0)));


	particlePool[index].velocity = RandStartVelocity(randKey, 0.4) * dir;
	particlePool[index].quaternion = Quaternion();
	particlePool[index].position = emitParticleInfo[0].originPos + dir * emitParticleInfo[0].radius;
	SetDefaultScale(index, randKey);
	SetSubframe(index, id);
}

void InitParticle(uint index, uint3 id) {
	[call]switch(emitParticleInfo[0].emitKind) {
    case 1:
    	sphereEmit(index, id);
        break;
    case 2:
    	coneEmit(index, id);
        break;
    case 3:
    	boxEmit(index, id);
        break;
	}
}

[numthreads(1024,1,1)]
void EmitParticle (uint3 id : SV_DispatchThreadID)
{
  if (id.x < emitParticleInfo[0].realEmitCount) {
	uint particleId = deadlist.Consume();
	alivelist.Append(particleId);
	InitParticle(particleId, id);

	InterlockedAdd(particleCounter[0].deadlistCount, -1);
	InterlockedAdd(particleCounter[0].alivelistCount, 1);

  }
}
